[gd_scene load_steps=5 format=2]

[ext_resource path="res://Graphics/player/p_01.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

var energy = 100.0
var hp     = 100.0
var score  = 0

var direction    = Vector2(0,0)

var target_point = position
var speed         = 0
var speed_incease = 25
var speed_max     = 150

var boost_bonus = 0
var boost_cost  = 25
var boost_max   = 350

func _ready():
	pass # Replace with function body.

func update_hp(delta):
	if get_parent().safe_faze: hp -= 3 * delta 
	else : energy += 1*delta
	energy = min( energy, 100 )
	hp     = min( hp,     100 )

func _process(delta):
	update_hp(delta)

func _input(event):
	if(Input.is_mouse_button_pressed(BUTTON_LEFT) and not boost_bonus):
		target_point = get_viewport().get_mouse_position()
		var origin_position = get_global_transform_with_canvas().origin
		direction = (target_point  - origin_position).normalized()
	
	if(Input.is_mouse_button_pressed(BUTTON_RIGHT) and not boost_bonus):
		if energy < boost_cost: return
		
		target_point = get_viewport().get_mouse_position()
		energy    -=  boost_cost 
		
		speed       = speed_max
		boost_bonus = boost_max
		var origin_position = get_global_transform_with_canvas().origin
		direction = (target_point  - origin_position).normalized()

func move_character(delta):
	boost_bonus = max( boost_bonus- speed_max*delta, 0 )
	
	if(Input.is_mouse_button_pressed(BUTTON_LEFT) and not boost_bonus):
		speed = min( speed_incease*delta + speed, speed_max)
	else: speed = max( speed - 2*speed_incease*delta, 0 ) 
	var velocity =  direction * ( speed + boost_bonus )
	
	if boost_bonus:
		position += delta *velocity
		target_point = get_global_transform_with_canvas().origin
		return
	move_and_slide(velocity)

func rotate_character(delta):
	
	var angle      = get_global_transform_with_canvas().origin.angle_to_point(target_point)
	var angle_diff = ( angle - deg2rad($Player.rotation_degrees) ) * delta
	#print( angle_diff) 
	$Player.rotation_degrees = rad2deg(angle)#$Player.rotation_degrees + rad2deg(angle_diff)
	#print( angle )

func _physics_process(delta):
	move_character(delta)
	if ! boost_bonus : rotate_character(delta)

func play_animation_if_not_played(anim_name):
	if $AnimationPlayer.current_animation != anim_name:
		$AnimationPlayer.play(anim_name)

func _on_AnimationPlayer_animation_finished(anim_name):
	pass # Replace with function body.
"

[sub_resource type="CircleShape2D" id=2]
radius = 198.493

[sub_resource type="Animation" id=3]
resource_name = "Eat"
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("Player:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 3 ]
}

[node name="KinematicBody2D" type="KinematicBody2D"]
collision_layer = 7
collision_mask = 7
script = SubResource( 1 )

[node name="Player" type="Sprite" parent="." groups=[
"player",
]]
position = Vector2( 1.46514, 2.02596 )
scale = Vector2( 0.353112, 0.367812 )
texture = ExtResource( 1 )
vframes = 4
hframes = 4

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
scale = Vector2( 0.2, 0.2 )
shape = SubResource( 2 )

[node name="Camera2D" type="Camera2D" parent="."]
current = true
zoom = Vector2( 0.5, 0.5 )
editor_draw_limits = true
editor_draw_drag_margin = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/Eat = SubResource( 3 )
[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_AnimationPlayer_animation_finished"]
