[gd_scene load_steps=7 format=2]

[ext_resource path="res://Graphics/player/Player.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

var energy = 0.0
var hp     = 100.0
var score  = 0

var direction    = Vector2(0,0)
var target_point = position

var move_speed    = 0
var speed_incease = 33
var speed_max     = 150

var boost_bonus = 0
var boost_cost  = 33
var boost_max   = 325

func update_hp(delta):
	if get_parent().is_safe_faze: hp -= 2.75 * delta 
	energy += 0.5*delta
	energy = min( energy, 100 )
	hp     = min( hp,     100 )

func _process(delta):
	update_hp(delta)

func handle_left_mouse_button(delta):
	if not Input.is_mouse_button_pressed(BUTTON_LEFT): 
		move_speed = max( move_speed - 2*speed_incease*delta, 0 )
		return 
	if(boost_bonus): return
	
	move_speed = min( speed_incease*delta + move_speed, speed_max)
	calculate_direction()

func handle_right_mouse_button(delta):
	boost_bonus = max( boost_bonus- speed_max*delta, 0 )
	if not Input.is_mouse_button_pressed(BUTTON_RIGHT): return 
	if(boost_bonus): return
	if energy < boost_cost: return

	energy     -=  boost_cost 
	move_speed  = speed_max
	boost_bonus = boost_max

	calculate_direction()	
	play_animation_if_not_played(\"Boost\")
 
func calculate_direction():
	target_point = get_viewport().get_mouse_position()
	var origin_position = get_global_transform_with_canvas().origin
	direction = (target_point  - origin_position).normalized()
	
func process_input(delta):
	handle_left_mouse_button(delta)
	handle_right_mouse_button(delta)
	handle_cheat()
	
func handle_cheat():
	if( Input.is_action_just_pressed(\"ui_focus_prev\") ): 
		energy = 100
		hp     = 100
		score  += 50

func move_with_boost(velocity):
	position    += velocity
	target_point = get_global_transform_with_canvas().origin
	
func move_character(delta):
	process_input(delta)
	
	var velocity =  direction * ( move_speed + boost_bonus )
	if boost_bonus: move_with_boost( velocity * delta )
	else: move_and_slide(velocity)

func rotate_character(delta):
	var angle      = get_global_transform_with_canvas().origin.angle_to_point(target_point)
	var angle_diff = ( angle - deg2rad($Player.rotation_degrees) ) * delta
	$Player.rotation_degrees = rad2deg(angle)

func _physics_process(delta):
	move_character(delta)
	if ! boost_bonus : rotate_character(delta)

func play_animation_if_not_played(anim_name):
	if $AnimationPlayer.current_animation != anim_name:
		$AnimationPlayer.play(anim_name)

func _on_AnimationPlayer_animation_finished(anim_name):
	play_animation_if_not_played(\"Idle\")
"

[sub_resource type="CircleShape2D" id=2]
radius = 198.493

[sub_resource type="Animation" id=3]
resource_name = "Boost"
length = 3.1
tracks/0/type = "value"
tracks/0/path = NodePath("Player:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 2.6, 2.8, 2.9 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 8, 9, 10, 10, 6, 7 ]
}

[sub_resource type="Animation" id=4]
length = 0.7
tracks/0/type = "value"
tracks/0/path = NodePath("Player:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 3, 2, 0, 0 ]
}

[sub_resource type="Animation" id=5]
length = 0.3
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("Player:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 1,
"values": [ 4, 5, 5 ]
}

[node name="KinematicBody2D" type="KinematicBody2D"]
z_index = 1
collision_layer = 15
collision_mask = 15
script = SubResource( 1 )

[node name="Player" type="Sprite" parent="." groups=[
"player",
]]
position = Vector2( 1.46514, 2.02596 )
scale = Vector2( 0.353112, 0.367812 )
texture = ExtResource( 1 )
vframes = 3
hframes = 4
frame = 4

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
scale = Vector2( 0.2, 0.2 )
shape = SubResource( 2 )

[node name="Camera2D" type="Camera2D" parent="."]
current = true
editor_draw_limits = true
editor_draw_drag_margin = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "Idle"
anims/Boost = SubResource( 3 )
anims/Eat = SubResource( 4 )
anims/Idle = SubResource( 5 )
[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_AnimationPlayer_animation_finished"]
